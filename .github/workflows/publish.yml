name: Create Version Tag

on:
  push:
    branches:
      - main

jobs:
  get-next-tag:
    name: Get Next Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract Module Version
        id: get-tag
        run: echo "tag=v$(jq -r .version deno.jsonc)" >> $GITHUB_OUTPUT

  get-last-tag:
    name: Get Last Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Latest Tag Name
        id: get-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
            semver_only: true

  create-tag:
    if: needs.get-next-tag.outputs.tag != needs.get-last-tag.outputs.tag
    name: Create Tag
    runs-on: ubuntu-latest
    needs:
      - get-next-tag
      - get-last-tag
    outputs:
      tag: ${{ needs.get-next-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Tag
        run: |
          git config user.name "Fergus Bentley"
          git config user.email "fergusbentley@gmail.com"
          git tag ${{ needs.get-next-tag.outputs.tag }}
          git push origin ${{ needs.get-next-tag.outputs.tag }}
  
  publish-deno:
    needs:
      - create-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1
      - name: Install Dependencies
        run: deno install
      - name: Publish to JSR
        run: deno publish

  publish-node:
    needs:
      - create-tag
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1
      - name: Install Yarn
        run: npm i -g yarn
      - name: Set Package Version
        env:
          TAG: ${{ needs.create-tag.outputs.tag }}
        run: yarn version --no-git-tag-version --new-version "${TAG:1}"
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Bundle Package
        run: deno task bundle
      - name: Publish to NPM Registry
        run: yarn publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}